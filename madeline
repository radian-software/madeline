#!/usr/bin/env python3

import abc
import base64
import getpass
import os
import paramiko
import pathlib
import re
import shlex
import shutil
import sshpubkeys
import stat
import subprocess
import sys
import traceback

## Logging and exit

USAGE = """\
usage: madeline --source <source> --target <target>
                [--identity <identity-file> | --no-identity]
                [--ssh-add | --no-ssh-add] [--verbose | --no-verbose]
                (put | get) [--exclude <path>]... <path>...\
"""

def log(message):
    print("madeline: " + message, file=sys.stderr)

def warn(message):
    log(message)

def die(message):
    log(message)
    sys.exit(1)

def die_with_usage():
    print(USAGE, file=sys.stderr)
    sys.exit(1)

global_last_progress_message = None

def log_progress(message):
    global global_last_progress_message
    if global_last_progress_message:
        sys.stderr.write("\r")
        num_blanks = max(0, len(global_last_progress_message) - len(message))
    else:
        num_blanks = 0
    sys.stderr.write(message)
    sys.stderr.write(" " * num_blanks)
    sys.stderr.flush()
    global_last_progress_message = message

## SSH utility functions

def get_matching_agent_key(identity):
    with open(identity + ".pub") as f:
        # This is a hack, see
        # https://github.com/ojarva/python-sshpubkeys/issues/52.
        public_key_b64 = base64.b64encode(
            sshpubkeys.SSHKey(f.read())._decoded_key).decode()
    for agent_key in paramiko.agent.Agent().get_keys():
        agent_key_b64 = agent_key.get_base64()
        if agent_key_b64 == public_key_b64:
            return agent_key
    return None

## Path objects

class Path(abc.ABC):

    @abc.abstractmethod
    def __init__(self, *args, **kwargs):
        raise NotImplementedError

    def is_stub(self):
        try:
            return self.readlink().startswith("|madeline:")
        except OSError:
            return False

    def get_stub_type(self):
        if self.is_symlink():
            return "link"
        if self.is_dir():
            return "dir"
        if self.is_file():
            return "file"
        die("not a file, directory, or symbolic link: {}"
            .format(self))

    def is_nonstub(self):
        return (not self.is_stub() and
                (self.is_file() or self.is_dir() or self.is_symlink()))

    def write_stub(self, stub_type):
        assert stub_type in ("dir", "file", "link")
        self.symlink_to("|madeline:" + stub_type)

    # Pure path operations

    @abc.abstractmethod
    def __str__(self):
        raise NotImplementedError

    @abc.abstractmethod
    def __eq__(self, other):
        raise NotImplementedError

    def __ne__(self, other):
        return not (self == other)

    @abc.abstractmethod
    def __truediv__(self, other):
        raise NotImplementedError

    @property
    @abc.abstractmethod
    def parents(self):
        raise NotImplementedError

    @abc.abstractmethod
    def relative_to(self, other):
        raise NotImplementedError

    # Query filesystem entries

    @abc.abstractmethod
    def is_file(self):
        raise NotImplementedError

    @abc.abstractmethod
    def is_dir(self):
        raise NotImplementedError

    @abc.abstractmethod
    def is_symlink(self):
        raise NotImplementedError

    @abc.abstractmethod
    def iterdir(self):
        raise NotImplementedError

    # Create filesystem entries

    @abc.abstractmethod
    def readlink(self):
        raise NotImplementedError

    @abc.abstractmethod
    def mkdir(self):
        raise NotImplementedError

    @abc.abstractmethod
    def symlink_to(self, target):
        raise NotImplementedError

    # Remove filesystem entries

    @abc.abstractmethod
    def rmdir(self):
        raise NotImplementedError

    @abc.abstractmethod
    def unlink(self):
        raise NotImplementedError

class Subpath:

    def __init__(self, path):
        self.path = pathlib.PurePath(path)
        if self.path.is_absolute():
            raise ValueError

    def __eq__(self, other):
        if isinstance(other, Subpath):
            return self.path == other.path
        return False

    def __str__(self):
        return str(self.path)

class LocalPath(Path):

    def __init__(self, path):
        self.path = pathlib.Path(path)
        if not self.path.is_absolute():
            raise ValueError

    def __str__(self):
        return str(self.path)

    def __eq__(self, other):
        if isinstance(other, LocalPath):
            return self.path == other.path
        return False

    def __truediv__(self, other):
        if isinstance(other, Subpath):
            return LocalPath(self.path / other.path)
        raise ValueError

    @property
    def parents(self):
        for parent in self.path.parents:
            yield LocalPath(parent)

    def relative_to(self, other):
        if isinstance(other, LocalPath):
            return Subpath(self.path.relative_to(other.path))
        raise ValueError

    def is_file(self):
        return self.path.is_file()

    def is_dir(self):
        return self.path.is_dir()

    def is_symlink(self):
        return self.path.is_symlink()

    def iterdir(self):
        subdirs = list(self.path.iterdir())
        subdirs.sort()
        return [LocalPath(subdir) for subdir in subdirs]

    def readlink(self):
        return os.readlink(self.path)

    def mkdir(self):
        self.path.mkdir()

    def symlink_to(self, target):
        self.path.symlink_to(target)

    def rmdir(self):
        self.path.rmdir()

    def unlink(self):
        self.path.unlink()

class Host:

    def __init__(self, hostname, user=None, port=None):
        self.hostname = hostname
        self.user = user or getpass.getuser()
        self.port = port or 22

    def __eq__(self, other):
        if isinstance(other, Host):
            return (self.user == other.user and
                    self.hostname == other.hostname and
                    self.port == other.port)
        return False

    def __hash__(self):
        return hash((self.user, self.hostname, self.port))

    def __str__(self):
        return self.hostname

class SFTPPool:

    def __init__(self, identity, ssh_add, verbose):
        self.identity = identity
        self.ssh_add = ssh_add
        self.verbose = verbose
        self.pool = {}

    def open_sftp(self, host):
        if self.verbose:
            log_progress("connecting to: {}".format(host))
        # Ways in which this code is a total hack:
        #
        # 1. It goes behind the back of Paramiko to get the keys from
        #    the ssh-agent manually and then compares their base64
        #    fingerprints with the desired identity.
        #
        # 2. It gets the fingerprint of the desired identity by
        #    accessing an undocumented internal attribute from the
        #    sshpubkeys library (see get_matching_agent_key above).
        #
        # 3. If the key isn't in the agent, it shells out to
        #    ssh-add(1) to add it.
        #
        # See https://github.com/paramiko/paramiko/issues/1216 and
        # https://github.com/paramiko/paramiko/issues/778 for why this
        # disaster has to exist.
        client = paramiko.SSHClient()
        client.load_system_host_keys()
        if self.identity:
            key = get_matching_agent_key(self.identity)
            if not key and self.ssh_add:
                try:
                    result = subprocess.run(["ssh-add", self.identity])
                    if result.returncode != 0:
                        die("command failed: ssh-add {}"
                            .format(shlex.quote(self.identity)))
                except FileNotFoundError:
                    die("command not found: ssh-add")
                key = get_matching_agent_key(self.identity)
                if not key:
                    die("key is supposed to be cached in ssh-agent, but isn't")
            if key:
                client.connect(
                    host.hostname, username=host.user, port=host.port,
                    pkey=key, allow_agent=False)
            else:
                passphrase = getpass.getpass(
                    prompt="Private key passphrase for {}: ".format(
                        repr(self.identity)))
                client.connect(
                    host.hostname, username=host.user, port=host.port,
                    passphrase=passphrase, key_filename=self.identity,
                    allow_agent=False)
        else:
            try:
                client.connect(
                    host.hostname, username=host.user, port=host.port)
            except paramiko.PasswordRequiredException:
                passphrase = getpass.getpass(prompt="Private key passphrase: ")
                client.connect(
                    host.hostname, username=host.user, port=host.port,
                    passphrase=passphrase)
        return client.open_sftp()

    def get_sftp(self, host):
        if host not in self.pool:
            self.pool[host] = self.open_sftp(host)
        return self.pool[host]

global_sftp_pool = None

class RemotePath(Path):

    sftp_pool = {}
    ssh_add_key = None

    @property
    def sftp(self):
        return global_sftp_pool.get_sftp(self.host)

    def __init__(self, host, path):
        self.host = host
        self.path = pathlib.Path(path)
        if not self.path.is_absolute():
            raise ValueError

    def __str__(self):
        return "{}:{}".format(self.host, self.path)

    def __eq__(self, other):
        if isinstance(other, RemotePath):
            return self.host == other.host and self.path == other.path
        return False

    def __truediv__(self, other):
        if isinstance(other, Subpath):
            return RemotePath(self.host, self.path / other.path)
        raise ValueError

    @property
    def parents(self):
        for parent in self.path.parents:
            yield RemotePath(self.host, parent)

    def relative_to(self, other):
        if isinstance(other, RemotePath) and self.host == other.host:
            return Subpath(self.path.relative_to(other.path))
        raise ValueError

    def is_file(self):
        try:
            return stat.S_ISREG(self.sftp.lstat(str(self.path)).st_mode)
        except FileNotFoundError:
            return False

    def is_dir(self):
        try:
            return stat.S_ISDIR(self.sftp.lstat(str(self.path)).st_mode)
        except FileNotFoundError:
            return False

    def is_symlink(self):
        try:
            return stat.S_ISLNK(self.sftp.lstat(str(self.path)).st_mode)
        except FileNotFoundError:
            return False

    def iterdir(self):
        attrs = self.sftp.listdir_attr(str(self.path))
        filenames = [attr.filename for attr in attrs]
        filenames.sort()
        return [RemotePath(self.host, self.path / filename)
                for filename in filenames]

    def readlink(self):
        return self.sftp.readlink(str(self.path))

    def mkdir(self):
        self.sftp.mkdir(str(self.path))

    def symlink_to(self, target):
        self.sftp.symlink(target, str(self.path))

    def rmdir(self):
        self.sftp.rmdir(str(self.path))

    def unlink(self):
        self.sftp.unlink(str(self.path))

def copy_path(source_path, target_path):
    if ((isinstance(source_path, LocalPath) and
         isinstance(target_path, LocalPath))):
        shutil.copy(source_path.path, target_path.path)
        return
    if ((isinstance(source_path, RemotePath) and
         isinstance(target_path, RemotePath))):
        with target_path.sftp.open(str(target_path.path), "w") as f:
            source_path.sftp.getfo(str(source_path.path), f)
        return
    if ((isinstance(source_path, LocalPath) and
         isinstance(target_path, RemotePath))):
        target_path.sftp.put(str(source_path.path), str(target_path.path))
        return
    if ((isinstance(source_path, RemotePath) and
         isinstance(target_path, LocalPath))):
        source_path.sftp.get(str(source_path.path), str(target_path.path))
        return
    raise ValueError

## Mirroring algorithm

def mirror_subpath(source_root, target_root, path, exclude_paths,
                   recursive, with_parents, create_stub, verbose):
    if verbose:
        log_progress("mirroring: {}".format(path))
    exclude_paths = [path for path in exclude_paths
                     if (source_root / path).is_nonstub()]
    abs_source_path = source_root / path
    abs_target_path = target_root / path
    # Only create parent directories in the target tree if we actually
    # have something to mirror, and there *are* parent directories
    # (i.e. we're not mirroring the whole tree).
    if ((with_parents and abs_source_path.is_nonstub() and
         abs_target_path != target_root)):
        abs_target_path_parents = list(abs_target_path.parents)
        abs_target_path_parents.reverse()
        # Get list of directories from target_root down to the direct
        # parent of abs_target_path.
        target_root_idx = abs_target_path_parents.index(target_root)
        abs_target_path_parents = abs_target_path_parents[target_root_idx:]
        # Create parent directories.
        for abs_target_parent in abs_target_path_parents:
            path_parent = abs_target_parent.relative_to(target_root)
            mirror_subpath(
                source_root, target_root, path_parent, exclude_paths,
                recursive=False, with_parents=False, create_stub=True,
                verbose=verbose)
    if abs_source_path.is_dir():
        # If there is a file or symlink, we can't mirror a directory
        # there.
        if not abs_target_path.is_dir():
            if abs_target_path.is_nonstub():
                die("already exists and not a directory: {}"
                    .format(abs_target_path))
            # If there was previously a stub there, get rid of it.
            try:
                abs_target_path.unlink()
            except FileNotFoundError:
                pass
            abs_target_path.mkdir()
        abs_source_path_children = list(abs_source_path.iterdir())
        # We will skip creating stubs in the source directory if we
        # are just going to remove it anyway, so whether the directory
        # will be removed needs to be determined ahead of time. We
        # start by guessing that we will be able to move all of the
        # contents to the target directory only in a recursive
        # mirroring operation.
        should_delete_directory = recursive
        # However, if any subpaths of the source directory exist and
        # are excluded from mirroring, we can't move them. Therefore
        # we must leave the source directoy.
        if should_delete_directory:
            for exclude_path in exclude_paths:
                if abs_target_path in (target_root / exclude_path).parents:
                    should_delete_directory = False
        for abs_source_path_child in abs_source_path_children:
            path_child = abs_source_path_child.relative_to(source_root)
            abs_target_path_child = target_root / path_child
            # If we are mirroring only the directory and not its
            # children, or if the child is excluded, then only update
            # the stub in the target tree.
            if not recursive or path_child in exclude_paths:
                if abs_source_path_child.is_dir():
                    if abs_target_path_child.is_dir():
                        continue
                    if abs_target_path_child.is_nonstub():
                        die("already exists and not a directory: {}"
                            .format(abs_target_path_child))
                    try:
                        abs_target_path_child.unlink()
                    except FileNotFoundError:
                        pass
                    abs_target_path_child.write_stub("dir")
                elif abs_source_path_child.is_nonstub():
                    # We can't have a file or directory on both sides.
                    if abs_target_path_child.is_nonstub():
                        die("already exists: {}"
                            .format(abs_target_path_child))
                    stub_type = abs_source_path_child.get_stub_type()
                    # Remove any existing stub. The type might have
                    # changed.
                    try:
                        abs_target_path_child.unlink()
                    except FileNotFoundError:
                        pass
                    abs_target_path_child.write_stub(stub_type)
                else:
                    # There's no file or directory in the source
                    # directory, so make sure we have a stub correctly
                    # corresponding to what's in the target directory
                    # (or remove any stale stub previously created).
                    try:
                        abs_source_path_child.unlink()
                    except FileNotFoundError:
                        pass
                    if ((not should_delete_directory and
                         abs_target_path_child.is_nonstub())):
                        stub_type = abs_target_path_child.get_stub_type()
                        abs_source_path_child.write_stub(stub_type)
            else:
                # Doing a full mirror.
                mirror_subpath(
                    source_root, target_root, path_child, exclude_paths,
                    recursive=True, with_parents=False,
                    create_stub=not should_delete_directory, verbose=verbose)
        # There shouldn't be anything left in the source directory by
        # now if should_delete_directory was true.
        if should_delete_directory:
            abs_source_path.rmdir()
            if create_stub:
                abs_source_path.write_stub("dir")
    elif abs_source_path.is_nonstub():
        if abs_target_path.is_nonstub():
            die("already exists: {}".format(abs_target_path))
        stub_type = abs_source_path.get_stub_type()
        try:
            abs_target_path.unlink()
        except FileNotFoundError:
            pass
        copy_path(abs_source_path, abs_target_path)
        abs_source_path.unlink()
        if create_stub:
            abs_source_path.write_stub(stub_type)
    else:
        try:
            abs_source_path.unlink()
        except FileNotFoundError:
            pass
        if create_stub and abs_target_path.is_nonstub():
            stub_type = abs_target_path.get_stub_type()
            abs_source_path.write_stub(stub_type)

## Path parsing and resolution

def parse_path(path):
    match = re.match(r"(?:([^@/\\]+)@)?([^:/\\]+):(.+)$", path)
    if match:
        host = Host(match.group(2), match.group(1))
        return RemotePath(host, os.path.abspath(match.group(3)))
    match = re.match(
        r"ssh://(?:([^@]+)@)?([^:/\\]+)(?::([^/\\]+))([/\\].+)$", path)
    if match:
        host = Host(match.group(2), match.group(1), match.group(3))
        return RemotePath(host, os.path.abspath(match.group(4)))
    return LocalPath(os.path.abspath(path))

def resolve_in_root(source_root, target_root, paths):
    resolved_paths = []
    for path in paths:
        # Make absolute *without* resolving symlinks, because
        # otherwise we might end up with a path into some
        # |madeline:dir directory...
        try:
            subpath = path.relative_to(source_root)
        except ValueError:
            try:
                subpath = path.relative_to(target_root)
            except ValueError:
                die("path is not inside source or target root: {}"
                    .format(path))
        resolved_paths.append(subpath)
    return resolved_paths

def main(args):
    global global_sftp_pool
    if args and args[0] in ("-h", "-?", "-help", "--help", "help"):
        print(USAGE, file=sys.stderr)
        sys.exit(0)
    if args and args[0] in ("-v", "-V", "--version", "version"):
        print("madeline pre-release version", file=sys.stderr)
        sys.exit(0)
    literal = False
    source_root = None
    target_root = None
    reverse = None
    dir_args = []
    path_args = []
    exclude_args = []
    identity = None
    ssh_add = False
    verbose = False
    while args:
        if not literal:
            if args[0] == "--source":
                if len(args) < 2:
                    die_with_usage()
                source_root = parse_path(args[1])
                args = args[2:]
                continue
            if args[0] == "--target":
                if len(args) < 2:
                    die_with_usage()
                target_root = parse_path(args[1])
                args = args[2:]
                continue
            if args[0] == "--exclude":
                if len(args) < 2:
                    die_with_usage()
                exclude_args.append(parse_path(args[1]))
                args = args[2:]
                continue
            if args[0] == "--identity":
                if len(args) < 2:
                    die_with_usage()
                identity = args[1]
                args = args[2:]
                continue
            if args[0] == "--no-identity":
                identity = None
                args = args[1:]
                continue
            if args[0] == "--ssh-add":
                ssh_add = True
                args = args[1:]
                continue
            if args[0] == "--no-ssh-add":
                ssh_add = False
                args = args[1:]
                continue
            if args[0] == "--verbose":
                verbose = True
                args = args[1:]
                continue
            if args[0] == "--no-verbose":
                verbose = False
                args = args[1:]
                continue
            if args[0] == "--":
                literal = True
                args = args[1:]
                continue
            if args[0].startswith("-"):
                die_with_usage()
        if reverse is None:
            if args[0] in ("put", "get"):
                reverse = args[0] == "get"
                args = args[1:]
                continue
            die_with_usage()
        subpath = parse_path(args[0])
        if args[0].endswith(os.sep):
            dir_args.append(subpath)
        else:
            path_args.append(subpath)
        args = args[1:]
        continue
    if ((source_root is None or
         target_root is None or
         reverse is None or
         (not dir_args and not path_args))):
        die_with_usage()
    try:
        os.getcwd()
    except FileNotFoundError:
        die("working directory does not exist: {}"
            .format(os.environ.get("PWD", "(unknown directory)")))
    global_sftp_pool = SFTPPool(
        identity=identity, ssh_add=ssh_add, verbose=verbose)
    # Make paths absolute without resolving symlinks to avoid
    # following stub symlinks.
    if ((source_root in target_root.parents or
         target_root in source_root.parents)):
        die("source and target roots are not disjoint")
    dir_subpaths = resolve_in_root(source_root, target_root, dir_args)
    subpaths = resolve_in_root(source_root, target_root, path_args)
    exclude_paths = resolve_in_root(source_root, target_root, exclude_args)
    if reverse:
        source_root, target_root = target_root, source_root
    # Establish SSH session before we start syncing.
    for dir_subpath in dir_subpaths:
        mirror_subpath(source_root, target_root, dir_subpath, exclude_paths,
                       recursive=False, with_parents=True, create_stub=True,
                       verbose=verbose)
    for subpath in subpaths:
        mirror_subpath(source_root, target_root, subpath, exclude_paths,
                       recursive=True, with_parents=True, create_stub=True,
                       verbose=verbose)
    if verbose:
        log_progress("mirroring done.")
    sys.exit(0)

if __name__ == "__main__":
    args = sys.argv[1:]
    debug = os.environ.get("MADELINE_DEBUG")
    try:
        try:
            main(args)
        finally:
            if global_last_progress_message:
                print(file=sys.stderr)
    except SystemExit as e:
        if debug and e.code != 0:
            traceback.print_exc()
        raise

# Local Variables:
# outline-regexp: "^##+"
# End:
